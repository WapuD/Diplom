// <auto-generated />
using System;
using API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace API.Data.Migrations
{
    [DbContext(typeof(CourseContext))]
    [Migration("20240413015321_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("API.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("categoryId");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("categoryName");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("API.Models.Comment", b =>
                {
                    b.Property<int>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("commentId");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CommentId"));

                    b.Property<int>("CommentCourse")
                        .HasColumnType("integer")
                        .HasColumnName("commentCourse");

                    b.Property<string>("CommentText")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("commentText");

                    b.HasKey("CommentId");

                    b.HasIndex("CommentCourse");

                    b.ToTable("Comment");
                });

            modelBuilder.Entity("API.Models.Course", b =>
                {
                    b.Property<int>("CourseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("courseId");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CourseId"));

                    b.Property<int>("CourseAuthor")
                        .HasColumnType("integer")
                        .HasColumnName("courseAuthor");

                    b.Property<int>("CourseCategory")
                        .HasColumnType("integer")
                        .HasColumnName("courseCategory");

                    b.Property<string>("CourseData")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("courseData");

                    b.Property<string>("CourseDesciption")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("courseDesciption");

                    b.Property<string>("CourseName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("courseName");

                    b.Property<string>("CourseText")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("courseText");

                    b.Property<string>("CourseTextRecom")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("courseTextRecom");

                    b.Property<string>("CourseTextWarning")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("courseTextWarning");

                    b.HasKey("CourseId");

                    b.HasIndex("CourseAuthor");

                    b.HasIndex("CourseCategory");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("API.Models.Image", b =>
                {
                    b.Property<int>("ImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("userId");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ImageId"));

                    b.Property<byte[]>("ImageData")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("userFirstName");

                    b.HasKey("ImageId");

                    b.ToTable("Image");
                });

            modelBuilder.Entity("API.Models.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("roleId");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("RoleId"));

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("roleName");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("API.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("userId");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UserId"));

                    b.Property<int?>("UserAge")
                        .HasColumnType("integer")
                        .HasColumnName("userAge");

                    b.Property<int?>("UserCountry")
                        .HasColumnType("integer")
                        .HasColumnName("userCountry");

                    b.Property<string>("UserFirstName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("userFirstName");

                    b.Property<bool?>("UserGender")
                        .HasColumnType("boolean")
                        .HasColumnName("userGender");

                    b.Property<int>("UserImage")
                        .HasColumnType("integer")
                        .HasColumnName("userImage");

                    b.Property<string>("UserLogin")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("userLogin");

                    b.Property<string>("UserPassword")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("userPassword");

                    b.Property<int>("UserRole")
                        .HasColumnType("integer")
                        .HasColumnName("userRole");

                    b.Property<string>("UserSecondName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("userSecondName");

                    b.Property<string>("UserThirdName")
                        .HasColumnType("text")
                        .HasColumnName("userThirdName");

                    b.HasKey("UserId");

                    b.HasIndex("UserImage");

                    b.HasIndex("UserRole");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("API.Models.Comment", b =>
                {
                    b.HasOne("API.Models.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CommentCourse")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("API.Models.Course", b =>
                {
                    b.HasOne("API.Models.User", "Author")
                        .WithMany()
                        .HasForeignKey("CourseAuthor")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CourseCategory")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("API.Models.User", b =>
                {
                    b.HasOne("API.Models.Image", "Image")
                        .WithMany()
                        .HasForeignKey("UserImage")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Models.Role", "Role")
                        .WithMany()
                        .HasForeignKey("UserRole")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Image");

                    b.Navigation("Role");
                });
#pragma warning restore 612, 618
        }
    }
}
